AWSTemplateFormatVersion: "2010-09-09"
Description: "My API Gateway and Lambda function"

Parameters:
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "call"

  lambdaApiFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "function-api"

  lambdaConsumerFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "function-consumer"

Mappings:

  NetworkToSubnet:
        "10.0.0.0":
            PubSubnetZoneA: "10.0.10.0/24"
            PrivSubnetZoneA: "10.0.20.0/24"
            PubSubnetZoneB: "10.0.30.0/24"
            PrivSubnetZoneB: "10.0.40.0/24"

Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "my-api"
      Description: "My API"

  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunctionApi.Arn"
      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref "apiGateway"
      RequestParameters:
          method.request.querystring.token: true
          method.request.querystring.reference: true
  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: !Ref "apiGatewayStageName"

  lambdaFunctionApi:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          queue: !GetAtt MyQueue.QueueName
      Code:
        ZipFile: |
          import os
          import boto3
          import json

          sqs = boto3.resource('sqs')

          def handler(event,context):
            queue = sqs.get_queue_by_name(QueueName=os.environ['QUEUE'])
            response = queue.send_message(MessageBody=json.dumps(event['queryStringParameters']))
            return {
              'body': json.dumps(event['queryStringParameters']),
              'headers': {
                'Content-Type': 'text/plain'
              },
              'statusCode': 200
            }
      Description: "My function"
      FunctionName: !Ref "lambdaApiFunctionName"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaApiIAMRole.Arn"
      Runtime: "python2.7"
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunctionApi.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/"

  lambdaApiIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaApiFunctionName}:*"
          PolicyName: "lambda-api"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - sqs:SendMessage
                - sqs:GetQueueUrl
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ChangeMessageVisibility
                Resource: !GetAtt MyQueue.Arn
          PolicyName: "lambda-api-sqs"

  lambdaApiLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaApiFunctionName}"
      RetentionInDays: 90

  MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        DelaySeconds: 0
        VisibilityTimeout: 120

#Consumer Lambda

  lambdaConsumerIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaConsumerFunctionName}:*"
          PolicyName: "lambda-consumer"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - sqs:ReciveMessage
                - sqs:SendMessage
                - sqs:GetQueueUrl
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ChangeMessageVisibility
                Resource: !GetAtt MyQueue.Arn
          PolicyName: "lambda-consumer-sqs"

  lambdaConsumerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaConsumerFunctionName}"
      RetentionInDays: 90

  lambdaFunctionConsumer:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          alb: !GetAtt PublicApplicationLoadBalancer.DNSName
          queue: !GetAtt MyQueue.QueueName
      Code:
        ZipFile: |
          import os
          import boto3
          import httplib

          sqs = boto3.resource('sqs')
          s3 = boto3.resource('s3')
          def handler(event,context):
            queue = sqs.get_queue_by_name(QueueName=os.environ['QUEUE'])
            response = queue.receive_message(MaxNumberOfMessages=50, VisibilityTimeout=360)
            conn = httplib.HTTPSConnection(QueueName=os.environ['ALB'])
            for i in response["messages"]:
              if checkKey(i["body"]["reference"]):
                queue.delete_message(i["ReceiptHandle"])
              else:
                conn.request("GET","/?token={}&reference={}".format(i["body"]["token"],i["body"]["reference"]))
            return "done"
          def checkKey(reference):
            try:
                  s3.Object(os.environ['BUCKET'], reference).load()
            except botocore.exceptions.ClientError as e:
                  if e.response['Error']['Code'] == "404":
                      return False
                  else:
                      raise
            else:
                  return True
      Description: "My function"
      FunctionName: !Ref "lambdaConsumerFunctionName"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaConsumerIAMRole.Arn"
      Runtime: "python2.7"
      Timeout: 10
      SecurityGroupIds:
        Ref: LambdaSecurityGroup
      SubnetIds:
        - Ref: PrivSubnetZoneA
        - Ref: PrivSubnetZoneB

  LambdaSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
      GroupDescription: Allow http to client host
      VpcId:
         Ref: VPC
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0

  LambdaCronRule: 
      Type: AWS::Events::Rule
      Properties: 
        Description: "EventRule"
        ScheduleExpression: "rate(1 minutes)"
        State: "ENABLED" 
        Targets:
         - Arn: !GetAtt lambdaFunctionConsumer.Arn
           Id: lambdaFunctionConsumer    
  PermissionForLambdaCronRule:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt lambdaFunctionConsumer.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt LambdaCronRule.Arn 

# Networking things
# VPC
  VPC:
      Type: 'AWS::EC2::VPC'
      Properties:
          CidrBlock:
              'Fn::Join': [ '/', [ '10.0.0.0', '16' ] ]
          EnableDnsSupport: true
          EnableDnsHostnames: true
          InstanceTenancy: 'default'
          Tags:
              - Key: 'Name'
                Value:
                    Ref: 'AWS::StackName'
  # Internet accessable subnet in the first availability zone
  PubSubnetZoneA:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '0'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PubSubnetZoneA
          MapPublicIpOnLaunch: 'True'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]
  # Non-internet accessable subnet in the first availability zone
  PrivSubnetZoneA:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '0'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PrivSubnetZoneA
          MapPublicIpOnLaunch: 'False'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone A', !Ref 'AWS::StackName' ] ]
  # Internet accessable subnet in the second availability zone
  PubSubnetZoneB:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '1'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PubSubnetZoneB
          MapPublicIpOnLaunch: 'True'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]
  # Non-internet accessable subnet in the second availability zone
  PrivSubnetZoneB:
      Type: 'AWS::EC2::Subnet'
      Properties:
          AvailabilityZone:
              Fn::Select:
              - '1'
              - Fn::GetAZs:
                  Ref: 'AWS::Region'
          CidrBlock:
              Fn::FindInMap:
              - NetworkToSubnet
              - '10.0.0.0'
              - PrivSubnetZoneB
          MapPublicIpOnLaunch: 'False'
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone B', !Ref 'AWS::StackName' ] ]
  # Gateway to the internet
  InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
      Properties:
          Tags:
              - Key: 'Name'
                Value:
                    Ref: 'AWS::StackName'
  # Associate the gateway to the VPC
  GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId:
              Ref: 'InternetGateway'
          VpcId:
              Ref: 'VPC'
  # Routing table for the public subnet in availability zone A
  RouteTablePubZoneA:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone A', !Ref 'AWS::StackName' ] ]
  # Routing table for the public subnet in availability zone B
  RouteTablePubZoneB:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Public', 'Zone B', !Ref 'AWS::StackName' ] ]
  # Route traffic through the internet gateway
  RoutePubZoneA:
      DependsOn:
          - InternetGateway
      Type: AWS::EC2::Route
      Properties:
          DestinationCidrBlock: '0.0.0.0/0'
          GatewayId:
              Ref: 'InternetGateway'
          RouteTableId:
              Ref: 'RouteTablePubZoneA'
  # Route traffic through the internet gateway
  RoutePubZoneB:
      DependsOn:
          - InternetGateway
      Type: AWS::EC2::Route
      Properties:
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId:
              Ref: 'InternetGateway'
          RouteTableId:
              Ref: 'RouteTablePubZoneB'
  # Associate public subnet to its routing table
  RouteAssociationPubSubnetZoneA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          SubnetId:
              Ref: 'PubSubnetZoneA'
          RouteTableId:
              Ref: 'RouteTablePubZoneA'
  # Associate public subnet to its routing table
  RouteAssociationPubSubnetZoneB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          SubnetId:
              Ref: 'PubSubnetZoneB'
          RouteTableId:
              Ref: 'RouteTablePubZoneB'
  # Routing table for the private subnet in availability zone A
  RouteTablePrivZoneA:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone A', !Ref 'AWS::StackName' ] ]
  # Routing table for the private subnet in availability zone B
  RouteTablePrivZoneB:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId:
              Ref: 'VPC'
          Tags:
              - Key: 'Name'
                Value:
                    'Fn::Join': [ ':', [ 'Private', 'Zone B', !Ref 'AWS::StackName' ] ]
  # Associate the private subnet with its routing table
  RouteAssociationPrivSubnetZoneA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          SubnetId:
              Ref: 'PrivSubnetZoneA'
          RouteTableId:
              Ref: 'RouteTablePrivZoneA'
  # Associate the private subnet with its routing table
  RouteAssociationPrivSubnetZoneB:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: 'PrivSubnetZoneB'
            RouteTableId:
                Ref: 'RouteTablePrivZoneB'

# EC2 things
  EC2TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 30
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 15
        HealthyThresholdCount: 5
        Matcher:
          HttpCode: '200'
        Name: EC2TargetGroup
        Port: 80
        Protocol: HTTP
        TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        #Targets:
        #- Id:
        #    Ref: AmazonLinuxInstance
        #  Port: 80
        UnhealthyThresholdCount: 3
        VpcId:
          Ref: 'VPC'
        Tags:
        - Key: Name
          Value: EC2TargetGroup
        - Key: Port
          Value: 80
  ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: EC2TargetGroup
        LoadBalancerArn:
            Ref: PunlicApplicationLoadBalancer
        Port: 80
        Protocol: HTTP
  PublicApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing # or internal
        Subnets:
        - Ref: PubSubnetZoneA
        - Ref: PubSubnetZoneB
        #SecurityGroups:
        #- Ref: ELBSecurityGroup
Outputs:
  apiGatewayInvokeURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}"